<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="xsltforms1.5/build/xsl/xsltforms.xsl" type="text/xsl"?>
<?xsltforms-options debug="no"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <head>
    <title>e-commerce demo (card not present)</title>
    <link rel="stylesheet" href="demo_ecomm.css"/>
    <script>module = {}; // Silence the warning in nanomsg-browser</script>
    <script src="https://cdn.jsdelivr.net/npm/nanomsg-browser@0.2.0/dist/nanomsg.min.js"/>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"/>
    <script src="xforms-utils.js"/>
    <script src="listener.js"> </script>
    <f:model id="m1">
      <f:instance id="i0">
        <ScapiNngNotification xmlns="">
          <ntf xmlns="">
            <events>
              <languageSelection>
                <language>en</language>
              </languageSelection>
              <serviceSelection>
                <serviceId>
                  <payment/>
                </serviceId>
              </serviceSelection>
              <amountEntry>
                <totalAmount/>
              </amountEntry>
              <manualEntry>
                <pan/>
                <expirationDate>
                  <year/>
                  <month/>
                </expirationDate>
                <cvdData>
                  <cvd/>
                </cvdData>
              </manualEntry>
            </events>
          </ntf>
          <id/>
        </ScapiNngNotification>
      </f:instance>
      <f:instance src="dummy_pans.xml" id="i4"/>
      <f:instance id="i5">
        <WorkingData xmlns="">
          <amount>
            <modifiable>false</modifiable>
            <currency>EUR</currency>
            <raw>5699</raw>
            <displayed/>
          </amount>
        </WorkingData>
      </f:instance>
      <f:bind ref="instance('i0')/ntf/events/manualEntry/cvdData/cvd" type="decimal" constraint=". &lt; 1000 and . &gt; 99" required="true()"/>
      <f:bind ref="instance('i0')/ntf/events/manualEntry/pan" type="card-number" constraint="is-card-number(.)" required="true()"/>
      <f:bind ref="instance('i0')/ntf/events/manualEntry/expirationDate/year" type="decimal" constraint=". &gt; 21 and . &lt; 100" required="true()"/>
      <f:bind ref="instance('i0')/ntf/events/manualEntry/expirationDate/month" type="decimal" constraint=". &gt; 0 and . &lt; 13" required="true()"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/totalAmount" type="decimal" constraint=". &lt; power(10, 12)-1" required="true()" calculate="instance('i5')/amount/raw"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/supplementaryAmount" type="decimal" constraint=". &lt; power(10, 12)-1"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/cashbackAmount" type="decimal" constraint=". &lt; power(10, 12)-1"/>
      <f:bind ref="instance('i0')/id" type="decimal" calculate="round(random() * 10000)"/>
      <f:bind ref="instance('i5')/amount/modifiable" type="boolean" readonly="count(instance('i0')/ntf/events)=0"/>
      <f:bind ref="instance('i5')/amount/displayed" type="decimal" relevant="../modifiable=false()" calculate="../raw * 0.01"/>
      <f:bind ref="instance('i5')/amount/raw" type="decimal" readonly="count(instance('i0')/ntf/events)=0" relevant="../modifiable=true()"/>
      <f:bind ref="instance('i5')/amount/currency" type="string" relevant="../modifiable=false()" readonly="true()"/>
      <f:submission id="s1" method="post" replace="none" resource="../nexo">
        <f:message level="modeless" ev:event="xforms-submit-error">Submit error</f:message>
        <f:action ev:event="xforms-submit-done">
          <f:setvalue ref="instance('i5')/amount/modifiable" value="false()"/>
          <f:delete nodeset="instance('i0')/*"/>
        </f:action>
      </f:submission>
    </f:model>
    <f:model id="request_log_model">
      <f:instance id="i_scap_requests">
        <ScapRequests xmlns="">
          <records relevant="false">
            <req received_at="" api="" source=""/>
          </records>
        </ScapRequests>
      </f:instance>
      <f:bind ref="instance('i_scap_requests')/records/@relevant" type="boolean"/>
      <f:bind ref="instance('i_scap_requests')/records" relevant="@relevant=true()"/>
      <f:action ev:event="request_log_event">
        <f:setvalue ref="instance('i_scap_requests')/records/@relevant" value="true()"/>
        <f:insert nodeset="instance('i_scap_requests')/records/req" at="1" position="before"/>
        <f:setvalue ref="instance('i_scap_requests')/records/req[1]/@api" value="event('api')"/>
        <f:setvalue ref="instance('i_scap_requests')/records/req[1]/@source" value="event('source')"/>
        <f:setvalue ref="instance('i_scap_requests')/records/req[1]/@received_at" value="local-dateTime()"/>
        <f:setvalue ref="instance('i_scap_requests')/records/req[1]" value="event('line')"/>
        <f:load if="event('api') != 'entry'">
          <f:resource value="'javascript:nexui_ack()'"/>
        </f:load>
      </f:action>
      <f:action ev:event="xforms-binding-exception">
        <f:insert nodeset="instance('i_scap_requests')/records/req" at="1" position="before"/>
        <f:setvalue ref="instance('i_scap_requests')/records/req[1]" value="event('type')"/>
      </f:action>
    </f:model>
  </head>
  <body>
    <ul id="header">
      <li>
        <div>Compatible with</div>
        <a href="https://www.iso20022.org/" target="_top">
          <img alt="ISO 20022 logo" class="logo" src="https://www.iso20022.org/themes/custom/iso20022_theme/images/logo-swift-iso20022.svg"/>
        </a>
        <span style="color: #02219c; font-weight: 600; font-size: 1rem; letter-spacing: 1.67px"> ISO 20022</span>
      </li>
      <li>
        <div>Based on nexo specification</div>
        <a href="https://www.nexo-standards.org/" target="_top">
          <img alt="nexo logo" class="logo" src="https://www.nexo-standards.org/sites/default/files/nexo.png"/>
        </a>
      </li>
      <li>
        <div>Follow my project on</div>
        <a href="https://github.com/hurufu?tab=projects" target="_top">
          <img alt="github" class="logo" src="https://github.githubassets.com/images/modules/logos_page/GitHub-Logo.png"/>
          <img alt="github logo" class="logo" src="https://github.githubassets.com/images/modules/logos_page/Octocat.png"/>
        </a>
      </li>
    </ul>
    <h2 class="text">Technology demonstration</h2>
    <h3 class="text">One-shot transaction applicable for e-commerce</h3>
    <f:group ref="instance('i0')/ntf/events" id="user_data">
      <f:group ref="instance('i5')/amount" id="transaction_info">
        <dl>
          <dt>Buyer</dt>
          <dd>John Doe</dd>
          <dt>Product</dt>
          <dd>Test #123</dd>
          <dt>Reference number</dt>
          <dd>UJ7676F0</dd>
          <dt><f:input ref="modifiable"><f:hint class="text">Adjust price</f:hint></f:input> Price</dt>
          <dd>
            <f:input id="amount" ref="raw"/>
            <f:output ref="displayed"/>
            <f:output ref="currency"/>
          </dd>
          <dt>Vendor</dt>
          <dd>Test shop</dd>
        </dl>
      </f:group>
      <f:group model="request_log_model" ref="instance('i_scap_requests')/records">
        <table id="transaction_result">
          <f:repeat nodeset="req">
            <tr>
              <td>
                <time>
                  <f:output value="substring(@received_at, 12, 8)"/>
                </time>
              </td>
              <td>
                <f:output ref="@source"/>
              </td>
              <td>
                <f:output ref="@api"/>
              </td>
              <td>
                <f:output ref="."/>
              </td>
            </tr>
          </f:repeat>
        </table>
      </f:group>
      <f:group ref="manualEntry" id="card_info">
        <f:label>Please provide card data </f:label>
        <div>Don't enter real card data. Use sample card numbers from the menu below!</div>
        <f:input ref="pan">
          <f:label>PAN: </f:label>
          <f:alert>Must have correct Luhn checksum</f:alert>
          <f:hint>Card number must have correct <a href="https://en.wikipedia.org/wiki/Luhn_algorithm" target="_top">Luhn</a> checksum</f:hint>
        </f:input>
        <f:select1 ref="pan">
          <f:label>or dummy value for: </f:label>
          <f:itemset nodeset="instance('i4')/brand">
            <f:label ref="."/>
            <f:value ref="@pan"/>
          </f:itemset>
        </f:select1>
        <f:group ref="expirationDate">
          <fieldset>
            <legend>Expiration Date</legend>
            <f:input ref="year">
              <f:label>Year: </f:label>
              <f:alert>2 digits from 22 to 99</f:alert>
              <f:hint>2 digits from 22 to 99</f:hint>
            </f:input>
            <f:input ref="month">
              <f:label>Month: </f:label>
              <f:alert>2 digits from 1 to 12</f:alert>
              <f:hint>2 digits from 1 to 12</f:hint>
            </f:input>
          </fieldset>
        </f:group>
        <f:group ref="cvdData">
          <f:input ref="cvd">
            <f:label>CVD: </f:label>
            <f:alert>Must consist of 3 digits</f:alert>
            <f:hint>CVD must consist of 3 digits</f:hint>
          </f:input>
        </f:group>
      </f:group>
      <f:group id="controls">
        <f:group ref="manualEntry">
          <f:trigger>
            <f:label>ðŸ†‘ Clear</f:label>
            <f:action ev:event="DOMActivate">
              <f:reset model="m1"/>
              <f:rebuild/>
              <f:reset model="request_log_model"/>
            </f:action>
          </f:trigger>
        </f:group>
        <f:group model="request_log_model" ref="instance('i_scap_requests')/records/req/text()">
          <f:trigger>
            <f:label>ðŸ”š Again</f:label>
            <f:action ev:event="DOMActivate">
              <f:reset model="request_log_model"/>
              <f:rebuild/>
              <f:reset model="m1"/>
            </f:action>
          </f:trigger>
        </f:group>
        <f:group ref="manualEntry">
          <f:submit submission="s1">
            <f:label>ðŸ’³ Pay</f:label>
          </f:submit>
        </f:group>
      </f:group>
    </f:group>
    <hr/>
    <h4>What is it?</h4>
    <h5>Explanation for someone new to nexo</h5>
    <p>This is a UI for a payment terminal software based on an open specification
      nexo-<abbr title="Financial Application Specification for Terminals">FAST</abbr>
      (freely available at
      <a href="https://www.nexo-standards.org/" target="_top">nexo-standards</a>
      website). Nexo application can be configured in many ways and it's general
      design fits nicely into different use cases. This app shows small subset
      of functionality that can be presented as a web application. It's the
      first open nexo implementation to my knowledge.
    </p>
    <h5>Explanation for someone familiar with nexo</h5>
    <p>You are looking at the demo front-end to
      <abbr title="Sale system, Cardholder, Attendant Protocol">SCAP</abbr>
      as defined in nexo-FAST. This particular app demonstrates the ability to
      trigger transactions by sending specific events: <code>Amount_Entry_Event</code>,
      <code>Manual_Entry_Event</code>, <code>Service_Selection_Event</code> and
      <code>Language_Selection_Event</code> all defined in section 5.2.2.
      In order to show transaction outcome to the user, this app displays
      data sent by <em>Data Output Interaction</em> (defined in 12.2.3.2).
      Additionally <em>Update Interfaces</em> (7.3.2.4) is used to simulate
      disabling or enabling of a card reader.</p>
    <p>After transaction is started UI displays all received messages. Output
      interactions are prefixed with <code>output</code>. Interface updates are
      prefixed with <code>interface</code> followed by sequence of bits that show
      status of each particular interface. Mostly as a demonstrations of inner
      workings this UI shows placeholders for <em>Sale System Notification</em>
      using <code>ssn</code> prefix and <em>Data Print Interaction</em> with
      <code>print</code>. Non-nexo extensions are prefixed with
      <abbr title="Proprietary Application Protocol"><code>pap</code></abbr>.</p>
    <p>You can choose different card brands to test different execution paths
      in nexo application.</p>
    <h4>Is it all nexo implementation can do?</h4>
    <p>It's far from the only uses of this implementation. Arguably it's most
      suited to be embedded into a terminal (<abbr title="Point of Sale">PoS</abbr>)
      software, but given modular design it can be used in many different
      scenarios like this one.</p>
    <h4>How does it work?</h4>
    <p>Complete business logic is defined by nexo-FAST and is implemented in
      the back-end, which controls this small UI app. Underlying back-end is a
      faithful implementation of the mentioned specification.</p>
    <p>It is implemented in such a way that it can be embedded into a most
      restricted payment terminal or it can be running as a standalone web server.</p>
    <h4>Where is 3D-Secure?</h4>
    <p><a href="https://en.wikipedia.org/wiki/3-D_Secure" target="_top">3D-Secure</a> is irrelevant for this demo, it should be
      implemented in production by redirecting user to the
      appropriate page.</p>
    <h4>What about acquiring host?</h4>
    <p>Acquiring host is currently simulated and it accepts any transaction.</p>
    <h4>What technological stack is used?</h4>
    <p>I'm glad you've asked! Core of application is mostly written using
      <a href="http://drakon-editor.sourceforge.net/" target="_top">DRAKON</a> diagrams. They
      are used to generate highly portable C code. The rest of application is
      written in C++ and Python. UI is written in XForms. Protocols are defined
      using ASN.1.</p>
    <hr/>
    <p class="text">Demo e-commerce form. All activity is simulated.</p>
  </body>
</html>
