<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="xsltforms1.5/build/xsl/xsltforms.xsl" type="text/xsl"?>
<?xsltforms-options debug="no"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:svg="http://www.w3.org/2000/svg">
  <head>
    <title>Nexo-in-the-cloud EMV card reader demo</title>
    <link rel="stylesheet" href="demo_card.css"/>
    <f:model id="m1">
      <f:instance id="i0">
        <ScapiNngNotification xmlns="">
          <ntf>
            <events>
              <languageSelection>
                <language>en</language>
              </languageSelection>
              <serviceSelection>
                <serviceId>
                  <payment/>
                </serviceId>
              </serviceSelection>
              <amountEntry>
                <totalAmount/>
                <supplementaryAmount>
                  <amount/>
                </supplementaryAmount>
                <cashbackAmount/>
              </amountEntry>
              <cardInserted/>
            </events>
          </ntf>
          <id>1</id>
        </ScapiNngNotification>
      </f:instance>
      <f:instance id="i1">
        <WorkingData xmlns="">
          <amount>
            <modifiable>true</modifiable>
            <currency>EUR</currency>
            <exponent>2</exponent>
            <raw>
              <total/>
              <supplementary/>
              <cashback/>
            </raw>
            <displayed>
              <total/>
              <supplementary/>
              <cashback/>
            </displayed>
          </amount>
        </WorkingData>
      </f:instance>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/totalAmount" type="decimal" calculate="instance('i1')/amount/raw/total" required="true()"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/supplementaryAmount/amount" type="decimal" calculate="instance('i1')/amount/raw/supplementary"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/supplementaryAmount" relevant="amount &gt; 0"/>
      <f:bind ref="instance('i0')/ntf/events/amountEntry/cashbackAmount" type="decimal" calculate="instance('i1')/amount/raw/cashback" relevant=". &gt; 0"/>
      <f:bind ref="instance('i1')/amount/modifiable" type="boolean"/>
      <f:bind ref="instance('i1')/amount/raw" relevant="../modifiable=true()"/>
      <f:bind ref="instance('i1')/amount/raw/total" type="decimal" constraint=". &lt; power(10, 12)-1" required="true()"/>
      <f:bind ref="instance('i1')/amount/raw/supplementary" type="decimal" constraint=". &lt; power(10, 12)-1"/>
      <f:bind ref="instance('i1')/amount/raw/cashback" type="decimal" constraint=". &lt; power(10, 12)-1"/>
      <f:bind ref="instance('i1')/amount/displayed" relevant="../modifiable=false()"/>
      <f:bind ref="instance('i1')/amount/displayed/total" calculate="concat(../../raw/total div power(10, ../../exponent), ' ', ../../currency)" relevant="../../raw/total &gt; 0"/>
      <f:bind ref="instance('i1')/amount/displayed/supplementary" calculate="concat(../../raw/supplementary div power(10, ../../exponent), ' ', ../../currency)" relevant="../../raw/supplementary &gt; 0"/>
      <f:bind ref="instance('i1')/amount/displayed/cashback" calculate="concat(../../raw/cashback div power(10, ../../exponent), ' ', ../../currency)" relevant="../../raw/cashback &gt; 0"/>
      <f:bind ref="instance('i1')/id" type="decimal" calculate="round(random() * 10000)"/>
      <f:submission id="s1" method="post" replace="none" resource="../nexo">
        <f:message level="modeless" ev:event="xforms-submit-error">Submit error</f:message>
        <f:action ev:event="xforms-submit-done">
          <f:setvalue ref="instance('i1')/amount/modifiable" value="false()"/>
        </f:action>
      </f:submission>
    </f:model>
  </head>
  <body>
    <h1>Nexo-in-the-cloud EMV card reader demo</h1>
    <f:group ref="instance('i1')/amount" id="transaction">
      <div class="transaction_details">
        <f:group ref="raw">
          <f:input ref="total">
            <f:label>Amount: </f:label>
          </f:input>
          <f:input ref="supplementary">
            <f:label>Tip: </f:label>
          </f:input>
          <f:input ref="cashback">
            <f:label>Cashback: </f:label>
          </f:input>
        </f:group>
        <f:group ref="displayed">
          <f:output ref="total" class="amount">
            <f:label>Amount:</f:label>
          </f:output>
          <f:output ref="supplementary" class="amount">
            <f:label>Tip:</f:label>
          </f:output>
          <f:output ref="cashback" class="amount">
            <f:label>Cashback:</f:label>
          </f:output>
        </f:group>
      </div>
      <f:group id="controls">
        <f:trigger ref="displayed">
          <f:label>ðŸ”š Again</f:label>
          <f:action ev:event="DOMActivate">
            <f:reset model="request_log_model"/>
            <f:rebuild/>
            <f:reset model="m1"/>
          </f:action>
        </f:trigger>
        <f:submit submission="s1" ref="raw">
          <f:label>ðŸ’³ Submit</f:label>
        </f:submit>
      </f:group>
    </f:group>
    <div id="transaction_outcome">
      <f:group id="outcome" class="transaction_details">
        <f:label>Transaction outcome</f:label>
      </f:group>
    </div>
    <f:group id="controls">
    </f:group>
    <h3>Use cases:</h3>
    <p>EMV Card can be presented to the smart card reader connected to the cardholder's computer, or this module can be executed on the secure terminal device, with easy to write and maintain UI written in any Web language.</p>
    <p>This demo show high modularity of an underlying backend it can be run as a service in a cloud or embeded into smallest terminals</p>
    <p>Internal bussiness logic is implemented in C bindings are implemented in C++</p>
  </body>
</html>
